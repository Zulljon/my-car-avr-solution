
Tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000c  00800100  00800100  000001e0  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b0  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000066d  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000034e  00000000  00000000  0000092d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000030f  00000000  00000000  00000c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000124  00000000  00000000  00000f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000353  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000b7  00000000  00000000  00001403  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000080  00000000  00000000  000014ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 94 00 	call	0x128	; 0x128 <main>
  88:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <FSM_ADC>:
//static ADC_state state =
//uint8_t adc_channel_proccesing;

void FSM_ADC(void){
	
	switch (_adc.state){
  90:	80 91 00 01 	lds	r24, 0x0100
  94:	86 95       	lsr	r24
  96:	8f 71       	andi	r24, 0x1F	; 31
  98:	83 30       	cpi	r24, 0x03	; 3
  9a:	41 f4       	brne	.+16     	; 0xac <FSM_ADC+0x1c>
		case ADC_DEADTIME ://состояние простоя
			if (!_adc.ON){		break;		} 
  9c:	80 91 00 01 	lds	r24, 0x0100
  a0:	80 ff       	sbrs	r24, 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <FSM_ADC+0x1c>
			else{
				_adc.state = ADC_START;
  a4:	e0 e0       	ldi	r30, 0x00	; 0
  a6:	f1 e0       	ldi	r31, 0x01	; 1
  a8:	81 7c       	andi	r24, 0xC1	; 193
  aa:	80 83       	st	Z, r24
  ac:	08 95       	ret

000000ae <F_buffer_read>:
uint8_t		buffer_read=0,
			buffer_write=0;

uint8_t F_buffer_read(uint8_t n){		// юзаем в вечном цикле, читаем и пихаем в уарт/радиомодуль
	uint8_t word;
	if (n == BUFFER_MAX){
  ae:	88 30       	cpi	r24, 0x08	; 8
  b0:	19 f4       	brne	.+6      	; 0xb8 <F_buffer_read+0xa>
		buffer_read = 0;}				// добавить флаг надобности чтения из буфера с установкой из функции записи
  b2:	10 92 02 01 	sts	0x0102, r1
  b6:	05 c0       	rjmp	.+10     	; 0xc2 <F_buffer_read+0x14>
	else {
		word = buffer[n];
  b8:	e8 2f       	mov	r30, r24
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	ed 5f       	subi	r30, 0xFD	; 253
  be:	fe 4f       	sbci	r31, 0xFE	; 254
  c0:	90 81       	ld	r25, Z
		++n;
		}
	return word;
	//return buffer[n];
}
  c2:	89 2f       	mov	r24, r25
  c4:	08 95       	ret

000000c6 <init_ADC>:
	F_buffer_write(buffer_write,UDRE0);
	//включить интерапты
}

void init_ADC(void){
	ADMUX = (1<<REFS1)|(1<<REFS0)|(1<<ADLAR)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0);
  c6:	80 ee       	ldi	r24, 0xE0	; 224
  c8:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (0<<ADEN)|(1<<ADSC)|(0<<ADATE)|(0<<ADIF)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  cc:	8f e4       	ldi	r24, 0x4F	; 79
  ce:	80 93 7a 00 	sts	0x007A, r24
	//ADCSRB = (0<<ACME)|(0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0);
	DIDR0 = (0<<ADC5D)|(1<<ADC4D)|(0<<ADC3D)|(0<<ADC1D)|(0<<ADC0D);
  d2:	80 e1       	ldi	r24, 0x10	; 16
  d4:	80 93 7e 00 	sts	0x007E, r24
  d8:	08 95       	ret

000000da <init_pwm>:
}

void init_pwm(void){
	TCCR2A = (0<<COM2A1)|(1<<COM2A0)|(0<<COM2B1)|(0<<COM2B0)|(0<<WGM21)|(1<<WGM20);
  da:	81 e4       	ldi	r24, 0x41	; 65
  dc:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = (0<<FOC2A)|(0<<FOC2B)|(1<<WGM22)|(1<<CS22)|(1<<CS21)|(1<<CS20);
  e0:	8f e0       	ldi	r24, 0x0F	; 15
  e2:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = (0<<OCIE2B)|(1<<OCIE2A)|(1<<TOIE2);
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	80 93 70 00 	sts	0x0070, r24
	TIFR2 = (0<<OCF2B)|(1<<OCF2A)|(1<<TOV2);
  ec:	87 bb       	out	0x17, r24	; 23
	ASSR = (1<<EXCLK)|(1<<AS2);//|(0<<TCN2UB)|(0<<OCR2AUB)|(0<<OCR2BUB)|(0<<TCR2AUB)(0<<TCR2BUB);
  ee:	80 e6       	ldi	r24, 0x60	; 96
  f0:	80 93 b6 00 	sts	0x00B6, r24
  f4:	08 95       	ret

000000f6 <init_I_O>:
	//OCR2A = 0;
	
}

void init_I_O(void){
	PORTB=(0<<PORTB0)|(0<<PORTB1)|(0<<PORTB2)|(1<<PORTB3)|(0<<PORTB4)|(0<<PORTB5);
  f6:	88 e0       	ldi	r24, 0x08	; 8
  f8:	85 b9       	out	0x05, r24	; 5
	DDRB= (0<<DDB0)|(0<<DDB1)|(1<<DDB2)|(1<<DDB3)|(0<<DDB4)|(0<<DDB5);
  fa:	8c e0       	ldi	r24, 0x0C	; 12
  fc:	84 b9       	out	0x04, r24	; 4
  fe:	08 95       	ret

00000100 <__vector_16>:
}

ISR(TIMER0_OVF_vect){
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
	
}
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <__vector_21>:

ISR(ADC_vect){
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
	// обрабатывать по двум АЦП вперед/назад, влево/вправо
}
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <main>:

int main(void)
{
	init_I_O();
 128:	0e 94 7b 00 	call	0xf6	; 0xf6 <init_I_O>
	init_pwm();
 12c:	0e 94 6d 00 	call	0xda	; 0xda <init_pwm>
	init_ADC();
 130:	0e 94 63 00 	call	0xc6	; 0xc6 <init_ADC>
	USART_Init(MYUBRR);
 134:	87 e6       	ldi	r24, 0x67	; 103
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 a6 00 	call	0x14c	; 0x14c <USART_Init>
	sei(); 
 13c:	78 94       	sei
	uint8_t asd1;
	
    while(1)
    {
        
		asd1 = F_buffer_read(outbound_processing.word);
 13e:	80 91 0b 01 	lds	r24, 0x010B
 142:	0e 94 57 00 	call	0xae	; 0xae <F_buffer_read>
		//interupt_processing();
		
		//Finit state machine
		FSM_ADC();
 146:	0e 94 48 00 	call	0x90	; 0x90 <FSM_ADC>
 14a:	f9 cf       	rjmp	.-14     	; 0x13e <main+0x16>

0000014c <USART_Init>:
*/

void USART_Init(uint16_t UBRR)
{
	//Set baud rate
	UBRR0H = (uint8_t)(UBRR>>8);
 14c:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (uint8_t)UBRR;
 150:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A = (0<<RXC0)|(0<<TXC0)|(1<<UDRE0)|(0<<FE0)|(0<<DOR0)|(0<<UPE0)|(0<<U2X0)|(0<<MPCM0);
 154:	80 e2       	ldi	r24, 0x20	; 32
 156:	80 93 c0 00 	sts	0x00C0, r24
	//Enable receiver and transmitter
	UCSR0B=(0<<RXCIE0)|(1<<TXCIE0)|(0<<UDRIE0)|(1<<RXEN0)|(1<<TXEN0)|(0<<UCSZ02)|(0<<RXB80)|(0<<TXB80);
 15a:	88 e5       	ldi	r24, 0x58	; 88
 15c:	80 93 c1 00 	sts	0x00C1, r24
	// Set frame format: 8data, 2stop bit
	UCSR0C=(0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00)|(0<<UCPOL0);
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	80 93 c2 00 	sts	0x00C2, r24
 166:	08 95       	ret

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
